{"version":3,"sources":["components/StatusView.jsx","components/Card.jsx","components/Game.jsx","components/gameLogics.js","components/shuffle.js","App.jsx","index.js"],"names":["StatusView","cards","openCount","clearPairCount","pairCount","length","pairViewText","clearText","style","textAlign","Card","content","open","openCard","clear","cardText","fontWeight","borderColor","borderWidth","borderStyle","onClick","verticalAlign","lineHeight","margin","Game","props","contentsLength","contents","state","clears","Array","fill","opens","index","this","slice","oldClears","unClearOpenContents","filter","hasClearPair","setState","reduce","clearCount","isClear","isOpenCards","map","cardContent","statusView","board","display","gridTemplateRows","gridTemplateColumns","padding","width","React","Component","shuffleCards","array","shfflingArray","i","j","Math","floor","random","tmp","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da0d30fe.chunk.js","sourcesContent":["import React from \"react\";\r\nconst StatusView = ({ cards, openCount, clearPairCount }) => {\r\n    /**\r\n     * 実は({})=>{}という書き方もできる\r\n     * (アロー関数+分割代入)\r\n     */\r\n\r\n    /**\r\n     * @summary ペア数はカードの長さから割り出せそう！\r\n     */\r\n    const pairCount = cards.length / 2;\r\n\r\n    /**\r\n     * @summary もしかしたらクリアした組数とペア数の比較で文言も変えられるかも？\r\n     */\r\n    const pairViewText = clearPairCount + \"/\" + pairCount;\r\n\r\n    const clearText = clearPairCount === pairCount ? \"クリア！\" : \"\";\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                textAlign: \"center\",\r\n            }}\r\n        >\r\n            <h1>神経衰弱</h1>\r\n            <p>ペア数 : {pairViewText}</p>\r\n            <p>開いた回数 : {openCount}</p>\r\n            <h2>{clearText}</h2>\r\n        </div>\r\n    );\r\n};\r\nexport { StatusView };\r\n","import React from \"react\";\r\nconst Card = ({ content, open, clear, openCard }) => {\r\n    /**\r\n     * 実は({})=>{}という書き方もできる\r\n     * (アロー関数+分割代入)\r\n     */\r\n\r\n    /**\r\n     * @summary 開いているカードなら中身を表示、閉じているカードなら何も表示しない\r\n     * クリア済みカードであれば常時表示\r\n     */\r\n    const cardText = open ? content : \"\";\r\n\r\n    /**\r\n     * @summary Cardの作成\r\n     */\r\n    return (\r\n        <>\r\n            <div\r\n                style={{\r\n                    textAlign: \"center\",\r\n                    fontWeight: \"bolder\",\r\n                    borderColor: \"black\",\r\n                    borderWidth: 1,\r\n                    borderStyle: \"solid\",\r\n                }}\r\n                onClick={() => {\r\n                    if (!open) {\r\n                        openCard();\r\n                    }\r\n                }}\r\n            >\r\n                <p\r\n                    style={{\r\n                        verticalAlign: \"middle\",\r\n                        lineHeight: \"8vw\",\r\n                        margin: 0,\r\n                    }}\r\n                >\r\n                    {cardText}\r\n                </p>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport { Card };\r\n","import React from \"react\";\r\nimport { StatusView } from \"./StatusView\";\r\nimport { Card } from \"./Card\";\r\nimport { hasClearPair } from \"./gameLogics\";\r\n\r\n/**\r\n * @class Board\r\n */\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const contentsLength = this.props.contents.length;\r\n\r\n        /**\r\n         * @summary stateの初期代入\r\n         */\r\n        this.state = {\r\n            /**\r\n             * @var {number} openCount 開閉回数\r\n             */\r\n            openCount: 0,\r\n\r\n            /**\r\n             * @var {boolean[]} clears カードはクリア済みかどうかの配列\r\n             * @default [false,false,false...] すべてfalseが入った配列\r\n             * すべてtrueになった状態:ゲームクリア\r\n             */\r\n            clears: new Array(contentsLength).fill(false),\r\n\r\n            /**\r\n             * @var {boolean[]} isOpenCards カードは開かれているかどうかの配列\r\n             * @default [false,false,false...] すべてfalseが入った配列\r\n             * 奇数回目のクリック直後、クリアでないカードは閉じる必要がありそう？\r\n             */\r\n            opens: new Array(contentsLength).fill(false),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @method openCard カードを開いたとみなし、stateをセットする\r\n     * @param {number} index 開いたカードの配列内での添え字\r\n     */\r\n    openCard(index) {\r\n        /**\r\n         * @summary まず開いた回数を仮更新する\r\n         */\r\n        const openCount = this.state.openCount + 1;\r\n\r\n        /**\r\n         * @summary 奇数回目の場合、開く前に1度未クリアのカードをすべて閉じる\r\n         */\r\n        const isEvenOpenCount = openCount % 2 === 1;\r\n        const opens = isEvenOpenCount\r\n            ? this.state.clears.slice()\r\n            : this.state.opens.slice();\r\n\r\n        opens[index] = !opens[index];\r\n\r\n        /**\r\n         * @summary クリア判定を行う\r\n         * @description クリアしているものがあれば、開いているものがクリア\r\n         * そうでなければ、元のクリア状態を維持\r\n         * 開いた回数が奇数や0の場合、hasClearPair内で弾く\r\n         */\r\n        const oldClears = this.state.clears.slice();\r\n        const contents = this.props.contents;\r\n        const clears = hasClearPair(contents, oldClears, opens)\r\n            ? opens\r\n            : oldClears;\r\n\r\n        /**\r\n         * @summary すべての算出後、setState\r\n         */\r\n        this.setState({\r\n            openCount: openCount,\r\n            opens: opens,\r\n            clears: clears,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        /**\r\n         * @summary this.propsで引数をAppから受け取る\r\n         */\r\n        const contents = this.props.contents;\r\n\r\n        /**\r\n         * @summary Game内でカードがクリア済みかstateを保有し、\r\n         * その個数からclearPairCountを算出する\r\n         */\r\n        const clears = this.state.clears.slice();\r\n        const clearCardCount = clears.reduce((clearCount, isClear) => {\r\n            if (isClear) {\r\n                return ++clearCount;\r\n            } else {\r\n                return clearCount;\r\n            }\r\n        }, 0);\r\n        const clearPairCount = clearCardCount / 2;\r\n\r\n        const openCount = this.state.openCount;\r\n        const isOpenCards = this.state.opens.slice();\r\n\r\n        /**\r\n         * @summary カード内容配列からカード配列を作成する\r\n         */\r\n        const cards = contents.map((cardContent, index) => {\r\n            const clear = clears[index];\r\n            const open = isOpenCards[index];\r\n            return (\r\n                <Card\r\n                    content={cardContent}\r\n                    key={index}\r\n                    clear={clear}\r\n                    open={open}\r\n                    openCard={() => {\r\n                        this.openCard(index);\r\n                    }}\r\n                />\r\n            );\r\n        });\r\n\r\n        /**\r\n         * @summary ステータス表示の作成\r\n         */\r\n        const statusView = (\r\n            <StatusView\r\n                cards={contents}\r\n                openCount={openCount}\r\n                clearPairCount={clearPairCount}\r\n            />\r\n        );\r\n\r\n        /**\r\n         * @summary 神経衰弱を行う場所の作成\r\n         */\r\n        const board = (\r\n            <div\r\n                style={{\r\n                    display: \"grid\",\r\n                    gridTemplateRows: \"repeat(4,8vw)\",\r\n                    gridTemplateColumns: \"repeat(4,8vw)\",\r\n                    padding: \"10%\",\r\n                    margin: \"auto\",\r\n                    width: \"32vw\",\r\n                }}\r\n            >\r\n                {cards}\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                {statusView}\r\n                {board}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport { Game };\r\n","/**\r\n * @method hasClearPair 新たにクリアしているペアがあるか調べる\r\n * @param {string[]} contents カードの中身配列\r\n * @param {boolean[]} clears クリア状態配列\r\n * @param {boolean[]} opens 開閉状態配列\r\n * @returns {boolean} 新たにクリアしているペアがあればtrue\r\n * @description 開閉状態とクリア状態からコンテンツを精査する\r\n */\r\nconst hasClearPair = (contents, clears, opens) => {\r\n    const unClearOpenContents = contents.filter((content, index) => {\r\n        return !clears[index] && opens[index];\r\n    });\r\n\r\n    /**\r\n     * @summary クリアしているか判定しセットする\r\n     * @description もし未クリアの空いているカードが2枚で、\r\n     * かつ値が同じなら、開いているカードはすべてクリア済み\r\n     * (初回は0枚がありうる)\r\n     */\r\n    const isClearPair =\r\n        unClearOpenContents.length === 2 &&\r\n        unClearOpenContents[0] === unClearOpenContents[1];\r\n    return isClearPair;\r\n};\r\nexport { hasClearPair };\r\n","/**\r\n * @method shuffleCards 引数配列をシャッフルする\r\n * @param {Array} array シャッフルしたい配列\r\n * @returns {Array} シャッフル済み配列\r\n * @description アルゴリズム上とても好ましくないが、手抜きをする\r\n */\r\nconst shuffleCards = (array) => {\r\n    const shfflingArray = array.slice();\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * i);\r\n        const tmp = shfflingArray[j];\r\n        shfflingArray[j] = shfflingArray[i];\r\n        shfflingArray[i] = tmp;\r\n    }\r\n    return shfflingArray;\r\n};\r\nexport { shuffleCards };\r\n","import React from \"react\";\r\nimport { Game } from \"./components/Game\";\r\nimport { shuffleCards } from \"./components/shuffle\";\r\n\r\n/**\r\n * @class App\r\n */\r\nclass App extends React.Component {\r\n    render() {\r\n        /**\r\n         * @var {number[]} contents 手札の暫定配列\r\n         */\r\n        const contents = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8];\r\n\r\n        return (\r\n            <>\r\n                <Game contents={shuffleCards(contents)} />\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport { App };\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}